extends layout

block content
  div(id="header")
    img(src="https://raw.githubusercontent.com/handsontable/static-files/master/Images/Logo/Handsontable/Handsontable-logo-300-74-new.png")
  div(id="container")
    div(id="col-left" class="split split-horizontal content")
      div(id="docs-container")
        iframe
    div(id="col-right" class="split split-horizontal")
      div(id="hot-container" class="split content")
        div(id="hot")
      div(id="log-container" class="split content")
        div(id="log" class="split")
  script.
    var container = document.getElementById('hot');
    
    var hot = new Handsontable(container, {
      dataSourceConnector: {
        controllerUrl: '/users',
        requestHeaders: { 'Content-Type': 'application/json' },
        onDataSend : function(data){
          if (data.request.body) {
            var element = document.getElementById("log");
            var newReq = document.createElement("div");
            newReq.className = "request request--" + data.request.method.toLowerCase();
            newReq.innerHTML = '<div class="method">' + data.request.method + '</div><div class="url">' + data.request.url + '</div><div class="data"><div class="req-body payload"><i class="toggle-data fal fa-minus-square"></i><p>Request</p><div id="req-json" class="json"></div></div><div class="res-body"><i class="toggle-data fal fa-minus-square"></i><p>Response</p><div id="res-json" class="json"></div></div></div>'
            element.insertBefore(newReq, element.firstChild);
            var reqDiv = document.getElementById("req-json");
            jsonTree.create(JSON.parse(data.request.body), reqDiv);
            var resDiv = document.getElementById("res-json");
            jsonTree.create(data.response, resDiv);
            
            toggleData = document.querySelectorAll('.toggle-data')
            for (var i = 0; i < toggleData.length; i++) {
              var elem = toggleData[i]
              elem.addEventListener("click", function(e) {
                e.preventDefault();
                var json = this.nextSibling.nextSibling
                if (json.style.display !== "none") {
                  for (j = 0; j < elem.classList.length; j++) {
                    if (this.classList[j] === "fa-minus-square") {
                      this.className = "fal fa-plus-square";
                    }
                  }
                  json.style.display = "none";
                } else {
                  for (j = 0; j < this.classList.length; j++) {
                    if (this.classList[j] === "fa-plus-square") {
                      this.className = "fal fa-minus-square"
                    }
                  }
                  json.style.display = "block";
                }
              })
            }
          }
        }
      },
    });

block scripts
  script(src='/js/split.js')
  script(src='https://docs.handsontable.com/pro/1.18.0/bower_components/handsontable-pro/dist/handsontable.full.js')
  script(src='/js/datasource-connector.full.js')
  script(src='/js/jsonTreeViewer.js')
  script.
    window.onload = function() {
      Split(['#col-left', '#col-right'], {
        gutterSize: 16,
        cursor: 'col-resize'
      });

      Split(['#hot-container', '#log-container'], {
        direction: 'vertical',
        sizes: [25, 75],
        gutterSize: 16,
        cursor: 'row-resize'
      });
    }

block css
  link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css")
  link(rel='stylesheet', href='https://docs.handsontable.com/pro/1.18.0/bower_components/handsontable-pro/dist/handsontable.min.css')
  link(href="/css/fontawesome-all.css", rel="stylesheet")
  link(href="/css/jsonTreeViewer.css", rel="stylesheet")
  link(href="https://fonts.googleapis.com/css?family=Roboto+Mono:400,700" rel="stylesheet")
  style.
    html, body {
      height: 100%;
    }
    body {
      padding: 8px;
      background-color: #F6F6F6;
      box-sizing: border-box;
    }
    #container {
      padding: 16px;      
      height: calc(100vh - 92px);
      box-sizing: border-box;
    }
    .split {
      -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
              box-sizing: border-box;
      overflow-y: auto;
      overflow-x: hidden;
    }
    .content {
      border: 1px solid #C0C0C0;
      box-shadow: inset 0 1px 2px #e4e4e4;
      background-color: #fff;
    }
    .gutter {
      background-color: transparent;
      background-repeat: no-repeat;
      background-position: 50%;
    }
    .gutter.gutter-horizontal {
      cursor: col-resize;
      background-image: url('../img/vertical.png');
    }
    .gutter.gutter-vertical {
      cursor: row-resize;
      background-image: url('../img/horizontal.png');
    }
    .split.split-horizontal, .gutter.gutter-horizontal {
      height: 100%;
      float: left;
      display: inline-block;
    }
    #header {
      padding: 23px 16px;
      background-color: #0040C2;
    }
    #header img {
      height: 42px;
      width: auto;
    }
    #docs-container {
      width: 100%;
      height: 100%;
      box-sizing: border-box;
    }
    #docs-container iframe {
      width: 100%;
      height: 100%;
    }
    #log-container i {
      font-family: "Font Awesome 5 Free" !important;
    }
    #log {
      display: block;
    }
    #log .request {
      margin-bottom: 10px;
    }
    #log .method, #log .url {
      display: inline-block;
    }
    #log .request .method {
      font-family: "Helvetica Neue";
      font-size: 12px;
    }
    #log .request--post .method {
      color: #41CD8E;
    }
    #log .request--get .method {
      color: #5DADFF;
    }
    #log .request--put .method {
      color: #FEA217;
    }
    #log .request--delete .method {
      color: #FC3B37;
    }
    #log .request .url {
      margin-left: 10px;
      color: #444F6C;
      font-size: 12px;
    }
    #log .request .data {
      border-left: 3px solid;
    }
    #log .request .req-body, #log .request .res-body {
      padding-left: 10px;
      font-family: 'Roboto Mono', monospace;
    }
    #log .request .req-body i, #log .request .res-body i {
      position: relative;
      top: 2px;
      color: #BCBCBC;
    }
    #log .request .req-body .payload, #log .request .res-body .payload {
      margin-bottom: 7px;
    }
    #log .request--post .data {
      border-color: #41CD8E;
    }
    #log .request--get .data {
      border-color: #5DADFF;
    }
    #log .request--put .data {
      border-color: #FEA217;
    }
    #log .request--delete .data {
      border-color: #FC3B37;
    }
    #log .request .req-body p, #log .request .res-body p {
      display: inline-block;
      margin: 3px 0 3px 6px;
      color: #BCBCBC;
      font-size: 9px;
      font-weight: 700;
      letter-spacing: 2px;
    }
    #log .request .req-body .json, #log .request .res-body .json {
      margin: 4px 0;
      padding: 9px;
      background-color: #F8F8F8;
    }
    #docs-container, #hot-container, #log-container {
      padding: 16px;
    }


